PENDING

1. Enhance state-machine for inputs so that if kridaanta selected then allow more both tibaadi or subaadi - wherever allowed.
1.1. taddhita could be allowed after subaadi so that supodhaatupraatipadikayoH is permitted in the chain-logic. But a convincing case for the need to retain subaadi before a taddhita is yet to arise. aagaviinaH for example does not need subaadi. It seems that having taddhita without subaadi is sufficient.
1.2. taddhita only occur after verb-form. so far, the need to have a subaadi before them hasn't arised. If this need does arise (as the meaning may carry vibhakti), then too the user is expected to choose a specific kind of resultant suffix so far. Supo dhaatupraatipadikayoH can be implemented later on. consider nRi + aNc - nara 
1.3. Multiple taddhitas are allowed but subaadi would always terminate the chain. This keeps the logic simple in the UI.
1.4. there is no need for multiple krit's to be allowed for all. this must be done on a case by case basis - so we would need a transition matrix for every individual suffix. For example, after ghaNc aur Nnvul, the result is a noun so taddhita aur noun-ends should follow.

2. comparison based on number of conditions should be added - so that the sutra with fewer conditions is applied.
3. Add uraNnrapaH - so that karshati can be formed from kRish.
4. Find out why kRi,raj and other basic dhaatus are absent.
5. Add support for aatmanepada/parasmaipada.
6. Ensure jhoantaH is not applied for jha suffix.

// TIPS
// * Add textbox listener

//// const textBox = document.getElementById('input1');
//// textBox.addEventListener('keypress', (e) => {
//// var keyPressed= `${e.key}`;
//// document.getElementById("console").innerHTML = keyPressed;
//// });

// * Refer to element by Id
    //var cy = cytoscape({
    //    container: document.getElementById('cy') // container to render in
    //});

// * iterate over arrays

//// for (let i = 0; i < arrayOfStrings.length; i++) {
////   const currentString = arrayOfStrings[i];
////   // Do something with currentString
//// }


/// *extract unique occurrences in a list
// const listTypes = [];
      // for (let row in options_returned) {
          // if (listTypes.indexOf(options_returned[row]['type'])<0){
            //  listTypes.push(options_returned[row]['type']);
         //  }
    //  }

// * declare positions and sizes in HTML declaration
//  <!--input  style="position:absolute; top:40; left:0;width:100px; height:30px;" type="text" id="input1" /-->
//  <!--button style="position:absolute;top:40;left:100;width:20px; height:20px;" type="button" >+</button-->


// * check if element exists in array
//if (boxArr.includes(i)){}

// canvas can be declared as follows
// <canvas id="myCanvas" width="900px" height="900px" style="position:absolute; border:1px solid #000000;top:400px; left:100px; z-index:1" />
